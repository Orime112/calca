{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FormItem","Item","App","create","state","resultList","fixed","checked","calcItem","dataIndex","groupData","Array","from","length","item","index","handleSubmit","form","props","validateFields","err","fieldsValue","resList","console","log","i","res","undefined","push","toFixed","setState","handleInputChange","handleInput","fn","delay","timerId","clearTimeout","setTimeout","apply","debounce","this","style","margin","fontSize","textAlign","gutter","xs","sm","md","lg","title","labelCol","span","wrapperCol","label","getFieldDecorator","rules","required","message","onChange","width","placeholder","isNaN","height","value","min","max","checkedChildren","unCheckedChildren","defaultChecked","onClick","float","resetFields","type","marginRight","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1b62bba4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Button, Form, InputNumber, Card, Row, Col, Switch  } from 'antd';\n\nconst FormItem = Form.Item;\n\nfunction debounce(fn, delay) {\n  let timerId;\n  return function() {\n    if(timerId) clearTimeout(timerId)\n    timerId = setTimeout(() => {\n      fn.apply(this)\n    }, delay)\n  }\n}\n\n@Form.create()\nclass App extends Component{\n\n  constructor() {\n    super()\n    this.handleInput = debounce(this.handleInput, 500)\n  }\n\n  state = {\n    resultList: [],\n    fixed: 0,\n    checked: false\n  }\n\n  // 重置\n  // handleReset = () => {\n  //   const { form } = this.props\n  //   form\n  // }\n\n  // 原始待遍历数据\n  calcItem = {\n    dataIndex: 0,\n  }\n  groupData = Array.from({length: 5}, (item, index) => ({\n    dataIndex: 'a' + index,\n  }))\n\n  // 表单提交\n  handleSubmit = () => {\n    const { form } = this.props\n    const { fixed } = this.state\n    form.validateFields((err, fieldsValue) => {\n      // if (err) return;\n      let resList = []\n      console.log({fieldsValue})\n      for(let i = 0; i<5; i++){\n        // const { a[i], b[i], c[i] } = fieldsValue;\n        const a = fieldsValue['a'+i] || undefined\n        const b = fieldsValue['b'+i] || undefined\n        const c = fieldsValue['c'+i] || undefined\n        const res = (a + b)*293 / (273+c)\n        resList.push(res.toFixed(fixed))\n      }\n      console.log({resList})\n      this.setState({resultList: resList})\n    });\n  }\n\n  // 实时响应用户输入\n  handleInputChange = () => {\n    this.handleInput()\n  }\n\n  handleInput = () => {\n    this.handleSubmit()\n  }\n\n  render() {\n    const { form } = this.props\n    const { resultList, fixed, checked } = this.state\n    return (\n       <div style={{ margin: '50px auto' }}>\n         <div style={{ fontSize: 50, textAlign: 'center' }}>温度压力计算</div>\n         <Card style={{ margin: 50 }}>\n         <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n\n           {\n             Array.from({length: 5}, (item, index) => (\n                <Col xs={24} sm={24} md={8} lg={4}>\n                  <Card title={`第${index+1}组`}>\n                    <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"表压\">\n                      {form.getFieldDecorator('a'+index, {\n                        rules: [\n                          { required: true, message: '表压不能为空！' },\n                        ],\n                      })(<InputNumber onChange={ !checked ? null : this.handleInputChange} style={{width: '100%'}} placeholder=\"请输入表压\" />)}\n                    </FormItem>\n                    <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"大气压\">\n                      {form.getFieldDecorator('b'+index, {\n                        rules: [\n                          { required: true, message: '大气压不能为空！' },\n                        ],\n                      })(<InputNumber onChange={ !checked ? null : this.handleInputChange} style={{width: '100%'}} placeholder=\"请输入大气压\" />)}\n                    </FormItem>\n                    <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"温度\">\n                      {form.getFieldDecorator('c'+index, {\n                        rules: [\n                          { required: true, message: '温度不能为空！' },\n                        ],\n                      })(<InputNumber onChange={ !checked ? null : this.handleInputChange} style={{width: '100%'}} placeholder=\"请输入温度\" />)}\n                    </FormItem>\n                    <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"计算结果\">\n                      {isNaN(resultList[index]) ? checked ? '输入不完整' : '输入完毕后点击计算' : resultList[index]}\n                    </FormItem>\n                  </Card>\n                </Col>\n             ))\n           }\n\n           <Col xs={24} sm={16} md={8} lg={4} style={{height: '100%'}}>\n             <Card title={`操作`} style={{height: '100%'}}>\n             <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"精度\">\n               保留 <InputNumber onChange={value => {\n               this.setState({fixed: value}, this.handleSubmit)\n             }} value={fixed} min={0} style={{width: 50}} max={22} /> 位小数\n             </FormItem>\n               <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"差值\">\n                 {isNaN(resultList[0] - resultList[4]) ? '输入未完成' : resultList[0] - resultList[4]}\n               </FormItem>\n               <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"实时计算\">\n                 <Switch checkedChildren=\"开\" unCheckedChildren=\"关\" defaultChecked={false} onClick={checked => this.setState({checked}, this.handleSubmit())} />\n               </FormItem>\n               <div style={{float: 'right',}}>\n                 <Button onClick={() => {\n                   form.resetFields()\n                   this.setState({resultList: []})\n                 }} type='default' style={{marginRight: 8}}>重置</Button>\n                 <Button onClick={this.handleSubmit} type='primary'>计算</Button>\n               </div>\n             </Card>\n           </Col>\n         </Row>\n         </Card>\n       </div>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
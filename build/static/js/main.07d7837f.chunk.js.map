{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FormItem","Item","App","create","state","resultList","fixed","checked","layout","calcItem","dataIndex","groupData","Array","from","length","item","index","handleSubmit","form","props","validateFields","err","fieldsValue","resList","console","log","i","res","undefined","push","toFixed","setState","handleInputChange","handleInput","fn","delay","timerId","clearTimeout","setTimeout","apply","debounce","this","style","margin","fontSize","textAlign","position","right","top","label","Group","defaultValue","buttonStyle","onChange","e","target","value","Button","marginBottom","className","pagination","columns","title","render","text","record","isNaN","getFieldDecorator","rules","required","message","width","placeholder","dataSource","pressure","alias","float","span","min","max","checkedChildren","unCheckedChildren","onClick","resetFields","type","marginRight","gutter","xs","sm","md","lg","labelCol","wrapperCol","height","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.07d7837f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Button, Form, InputNumber, Card, Row, Col, Switch, Table, Radio   } from 'antd';\nimport './App.css'\n\nconst FormItem = Form.Item;\n\nfunction debounce(fn, delay) {\n  let timerId;\n  return function() {\n    if(timerId) clearTimeout(timerId)\n    timerId = setTimeout(() => {\n      fn.apply(this)\n    }, delay)\n  }\n}\n\n@Form.create()\nclass App extends Component{\n\n  constructor() {\n    super()\n    this.handleInput = debounce(this.handleInput, 300)\n  }\n\n  state = {\n    resultList: [],\n    fixed: 3,\n    checked: false,\n    layout: 'table'\n  }\n\n  // 重置\n  // handleReset = () => {\n  //   const { form } = this.props\n  //   form\n  // }\n\n  // 原始待遍历数据\n  calcItem = {\n    dataIndex: 0,\n  }\n  groupData = Array.from({length: 5}, (item, index) => ({\n    dataIndex: 'a' + index,\n  }))\n\n  // 表单提交\n  handleSubmit = () => {\n    const { form } = this.props\n    const { fixed } = this.state\n    form.validateFields((err, fieldsValue) => {\n      // if (err) return;\n      let resList = []\n      console.log({fieldsValue})\n      for(let i = 0; i<5; i++){\n        // const { a[i], b[i], c[i] } = fieldsValue;\n        const a = fieldsValue['a'+i] || undefined\n        const b = fieldsValue['b'+i] || undefined\n        const c = fieldsValue['c'+i] || undefined\n        const res = (a + b)*293 / (273+c)\n        resList.push(res.toFixed(fixed))\n      }\n      console.log({resList})\n      this.setState({resultList: resList})\n    });\n  }\n\n  // 实时响应用户输入\n  handleInputChange = () => {\n    this.handleInput()\n  }\n\n  handleInput = () => {\n    this.handleSubmit()\n  }\n\n  render() {\n    const { form } = this.props\n    const { resultList, fixed, checked, layout } = this.state\n\n    console.log(checked, 'checked')\n\n    return (\n       <div style={{ margin: '50px auto' }}>\n         <div style={{ fontSize: 50, textAlign: 'center', position: 'relative' }}>17系列20℃箱内压力转换器</div>\n         <Form layout='inline' style={{position: 'absolute', right: 36, top: 120}}>\n           <FormItem label='切换布局'>\n             <Radio.Group defaultValue=\"table\" buttonStyle=\"solid\" onChange={e => {\n               console.log(e)\n               this.setState({layout: e.target.value})\n             }}>\n               <Radio.Button value=\"table\">表格布局</Radio.Button>\n               <Radio.Button value=\"form\">表单布局</Radio.Button>\n             </Radio.Group>\n           </FormItem>\n         </Form>\n\n         <Card style={{ margin: 50 }}>\n           { layout === 'table' ? <>\n             <Table\n                style={{ marginBottom: 20 }}\n                className='tableList'\n                pagination={false}\n                columns={[\n                  {\n                    title: '压力',\n                    dataIndex: 'pressure',\n                    className: 'centerAlign',\n                  },\n                  ...Array.from({length: 5}, (item, index) => ({\n                    title: `第${index + 1}天`,\n                    dataIndex: `alias`,\n                    className: 'centerAlign',\n                    render: (text, record) => {\n                      if(text === 'd'){\n                        return <span>{isNaN(resultList[index]) ? '输入完毕后点击计算': resultList[index]}</span>\n                      }\n                      return this.props.form.getFieldDecorator(text+index, {\n                        rules: [\n                          { required: true, message: '温度不能为空！' },\n                        ],\n                      })(<InputNumber onChange={ !checked ? null : this.handleInputChange} style={{width: '50%'}} placeholder=\"请输入温度\" />)\n                    }\n                  }))\n                ]}\n                dataSource={[\n                  {pressure: '表压(kPa)', alias: 'a'},\n                  {pressure: '场地大气压(kPa)', alias: 'b'},\n                  {pressure: '场地温度(℃)', alias: 'c'},\n                  {pressure: '箱内气体压力(kPa)', alias: 'd'},\n                ]}\n             />\n             <Row >\n               <Form layout='inline' >\n                 <FormItem label=\"泄漏量（kPa）\" style={{ margin: '0 40px' }}>\n                   <span>{isNaN(resultList[0] - resultList[4]) ? '输入未完成' : (resultList[0] - resultList[4]).toFixed(fixed)}</span>\n\n                 </FormItem>\n                 <div style={{float: 'right',}}>\n                   <FormItem label=\"计算精度\" span={7} style={{ margin: '0 10px' }}>\n                     保留 <InputNumber onChange={value => {\n                     this.setState({fixed: value}, this.handleSubmit)\n                   }} value={fixed} min={0} style={{width: 50}} max={22} /> 位小数\n                   </FormItem>\n                   <FormItem label=\"实时计算\" style={{ margin: '0 40px' }}>\n                     <Switch checkedChildren=\"开\" unCheckedChildren=\"关\"  checked={checked} onClick={checked => this.setState({checked}, this.handleSubmit())} />\n                   </FormItem>\n                   <Button onClick={() => {\n                     form.resetFields()\n                     this.setState({resultList: []})\n                   }} type='default' style={{marginRight: 8}}>重置</Button>\n                   <Button onClick={this.handleSubmit} type='primary'>计算</Button>\n                 </div>\n               </Form>\n             </Row>\n           </> : <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n             {\n               Array.from({length: 5}, (item, index) => (\n                  <Col xs={24} sm={24} md={8} lg={8}>\n                    <Card title={`第${index+1}组`}>\n                      <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"表压（kPa）\">\n                        {form.getFieldDecorator('a'+index, {\n                          rules: [\n                            { required: true, message: '表压不能为空！' },\n                          ],\n                        })(<InputNumber onChange={ !checked ? null : this.handleInputChange} style={{width: '100%'}} placeholder=\"请输入表压\" />)}\n                      </FormItem>\n                      <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"场地大气压（kPa）\">\n                        {form.getFieldDecorator('b'+index, {\n                          rules: [\n                            { required: true, message: '大气压不能为空！' },\n                          ],\n                        })(<InputNumber onChange={ !checked ? null : this.handleInputChange} style={{width: '100%'}} placeholder=\"请输入大气压\" />)}\n                      </FormItem>\n                      <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"场地温度（℃）\">\n                        {form.getFieldDecorator('c'+index, {\n                          rules: [\n                            { required: true, message: '温度不能为空！' },\n                          ],\n                        })(<InputNumber onChange={ !checked ? null : this.handleInputChange} style={{width: '100%'}} placeholder=\"请输入温度\" />)}\n                      </FormItem>\n                      <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"箱内气体压力（kPa）\">\n                        {isNaN(resultList[index]) ? checked ? '输入不完整' : '输入完毕后点击计算' : resultList[index]}\n                      </FormItem>\n                    </Card>\n                  </Col>\n               ))\n             }\n\n             <Col xs={24} sm={16} md={8} lg={8} style={{height: '100%'}}>\n               <Card title={`操作`} style={{height: '100%'}}>\n                 <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"计算精度\">\n                   保留 <InputNumber onChange={value => {\n                   this.setState({fixed: value}, this.handleSubmit)\n                 }} value={fixed} min={0} style={{width: 50}} max={22} /> 位小数\n                 </FormItem>\n                 <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"泄漏量（kPa）\">\n                   {isNaN(resultList[0] - resultList[4]) ? '输入未完成' : (resultList[0] - resultList[4]).toFixed(fixed)}\n                 </FormItem>\n                 <FormItem labelCol={{ span: 7 }} wrapperCol={{ span: 15 }} label=\"实时计算\">\n                   <Switch checkedChildren=\"开\" unCheckedChildren=\"关\" checked={checked} onClick={checked => this.setState({checked}, this.handleSubmit())} />\n                 </FormItem>\n                 <div style={{float: 'right',}}>\n                   <Button onClick={() => {\n                     form.resetFields()\n                     this.setState({resultList: []})\n                   }} type='default' style={{marginRight: 8}}>重置</Button>\n                   <Button onClick={this.handleSubmit} type='primary'>计算</Button>\n                 </div>\n               </Card>\n             </Col>\n           </Row> }\n\n\n         </Card>\n       </div>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}